<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Dummy REST JSON Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - API JSON" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)} </stringProp>
        <longProp name="ThreadGroup.start_time">1517979076000</longProp>
        <longProp name="ThreadGroup.end_time">1517979076000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,300)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Dummy Sampler - JSON - 1" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">GET https://someurl.com/somepath</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;data&quot;:[{&quot;type&quot;:&quot;articles&quot;,&quot;id&quot;:&quot;1&quot;,&quot;attributes&quot;:{&quot;title&quot;:&quot;JSON API paints my bikeshed!&quot;,&quot;body&quot;:&quot;The shortest article. Ever.&quot;,&quot;created&quot;:&quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss,)}.000Z&quot;,&quot;updated&quot;:&quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss,)}.000Z&quot;},&quot;relationships&quot;:{&quot;author&quot;:{&quot;data&quot;:{&quot;id&quot;:&quot;42&quot;,&quot;type&quot;:&quot;people&quot;}}}}],&quot;included&quot;:[{&quot;type&quot;:&quot;people&quot;,&quot;id&quot;:&quot;42&quot;,&quot;attributes&quot;:{&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:80,&quot;gender&quot;:&quot;male&quot;}}]}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,100)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,20)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON1.Data" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">JSON1.Data</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.*</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON1.Title" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">JSON1.Title</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.attributes.title</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">JSON1.Data</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON1.title" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">JSON1.title</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.*.attributes.title</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON1.body" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">JSON1.body</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.*.attributes.body</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Dummy Sampler - JSON - 2" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">GET https://someurl.com/somepath</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;data&quot;:[{&quot;type&quot;:&quot;articles&quot;,&quot;id&quot;:&quot;1&quot;,&quot;attributes&quot;:{&quot;title&quot;:&quot;JSON API paints my bikeshed!&quot;,&quot;body&quot;:&quot;The shortest article. Ever.&quot;},&quot;relationships&quot;:{&quot;author&quot;:{&quot;data&quot;:{&quot;id&quot;:&quot;42&quot;,&quot;type&quot;:&quot;people&quot;}}}}],&quot;included&quot;:[{&quot;type&quot;:&quot;people&quot;,&quot;id&quot;:&quot;42&quot;,&quot;attributes&quot;:{&quot;name&quot;:&quot;John&quot;}}]}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,100)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,20)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON2.Data" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">JSON2.Data</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.[0]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON2.body" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">JSON2.body</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..body</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">JSON2.Data</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON2.name" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">JSON2.name</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.included.*.attributes.name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Dummy Sampler - JSON - 3" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">GET https://someurl.com/somepath</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;jsonapi&quot;:{&quot;version&quot;:&quot;1.0&quot;},&quot;errors&quot;:[{&quot;code&quot;:&quot;123&quot;,&quot;source&quot;:{&quot;pointer&quot;:&quot;/data/attributes/first-name&quot;},&quot;title&quot;:&quot;Value is too short&quot;,&quot;detail&quot;:&quot;First name must contain at least three characters.&quot;},{&quot;code&quot;:&quot;225&quot;,&quot;source&quot;:{&quot;pointer&quot;:&quot;/data/attributes/password&quot;},&quot;title&quot;:&quot;Passwords must contain a letter, number, and punctuation character.&quot;,&quot;detail&quot;:&quot;The password provided is missing a punctuation character.&quot;},{&quot;code&quot;:&quot;226&quot;,&quot;source&quot;:{&quot;pointer&quot;:&quot;/data/attributes/password&quot;},&quot;title&quot;:&quot;Password and password confirmation do not match.&quot;}]}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,100)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,20)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON3.code" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">JSON3.code</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..code</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON3.pointer" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">JSON3.pointer</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..pointer</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
